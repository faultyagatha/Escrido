/*# @_page_ setup Escrido Setup

The basic concept behind Escrido is, that it reads one @ref escrido_file "configuration file", one or more @ref source_files "source files" and one or more @ref template_files "document template files" and returns a web document (as a set of HTML files) and/or a LaTeX document (multiple .tex files).

@section escrido_file The Escrido Configuration File

The <em>Escrido  configuration file</em> is a text file that contains all configuration options for generating the required output. It is typically named "escridofile" without any extension. Examples are the files <em>examples/manual/escridofile</em> and <em>examples/minimal/escridofile</em> inside the @link https://github.com/gunnar-schulze/Escrido "Escrido repository". Note that all options that can be written into the Escrido file can also be applied as <em>command line arguments</em> on calling the program (run @code >escrido --help @endcode for all command line arguments). If an option happens to be set in the configuration file as well as it is given as an argument of the command line call, the command line call argument has precendence.

On calling Escrido, the configuration file is specified by the @code -f @endcode option:

@example
escrido -f ./doc/escridofile
@par

@section source_files Source Files

The <em>source files</em> contain the content for the Escrido document. These can either be plain text files that contain   Escrido content only (typically used for chapters that do not have a 1:1 correspondence to the documented code) or the Escrido content can turn up inside text files of some other type, e.g. inside comments in source code files. Escrido reads through all source files and searches for start deliminators (<tt>&#47;*#</tt> for multi-line content, <tt>&#47;&#47;#</tt> for single lines) and interprets everything <em>after that</em> as Escrido content until either the multi-line end deliminator (<tt>#*&#47;</tt>) or a line break is encountered.

The definition of which files shall be used as source files is given as command @code INCLUDE @endcode in the @ref escrido_file "configuration file" or as argument @code -I @endcode in the command line call.

Examples for source files can be found inside <em>examples/manual/</em> and <em>examples/minimal/</em> in the @link https://github.com/gunnar-schulze/Escrido "Escrido repository".

@section template_files Template Files

So how is the output brought into shape? This is done by using <em>template files</em> for HTML or LaTeX output. A template file for HTML output is little more than a common HTML file that contains certain @ref replacement_tags "Escrido replacement tags" at the desired positions. These tags are then replaced by Escrido with the actual content from the source files in order to generate the output files. This procedure has the advantage that it is possible to bring the content into very different shape by using different template files and that the structurization can be done by using HTML only.

There should be at least one HTML template file <em>default.html</em> that is applied when no other template files are found. However, each page (see @ref page_tags ) can have its own template file that should be named like page followed by the ending <em>.html</em>. The template for the @ref main_page "main page" can be given as <em>index.html</em>. Note that there is an option @code WEBDOC_FILE_ENDING @endcode for the @ref escrido_file "configuration file" and its sibling @code -wdo @endcode for the command line that allows to define a alternative ending for the file names (e.g. <em>.php</em> files shall be generated).

Templates for LaTeX files work similarly but with slightly more complexity.

The directory for all template files is given as option @code TEMPLATE_DIR @endcode in the @ref escrido_file "configuration file" or as argument @code -t @endcode in the command line calls.

@section setup_on_page_search On-Page Search

Escrido can create a <em>search index file</em> that can be used to add a custom JavaScript search on the site. To create this file, @code GENERATE_SEARCH_INDEX @endcode command in the @ref escrido_file "" (or the corresponding @code -si @endcode command line argument) must be set to 'YES' (for the command line argument: 'on'). An example of linking this search index file to a JavaScript search library is given for the libraries @link https://lunrjs.com/ "lunr" and @link https://fusejs.io/ "fuse.js": you can search this manual by either of the two with the search bar on the top right. File 'js/search.js' shows a possible implementation of that.











#*/
